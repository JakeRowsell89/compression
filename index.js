const fs = require('fs')
const Encode = require('./lib/encode')
const Util = require('./lib/util')
const Tree = require('./lib/tree')
const Compress = require('./lib/compress')
const Decompress = require('./lib/decompress')
const Decode = require('./lib/decode')
const Output = require('./lib/output')
const Input = require('./lib/input')
const Buffer = require('buffer').Buffer;
// const STR = 'I am a test for the algorithm'
// console.log('Input:')
// const STR = "This is a string that is to be encoded. Let's see how that works. We can even add extra steps to encode our bits into unicode. This is actually only aesthetic, as javascript string characters are 16 bits per character. aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaThis is a string that is to be encoded. Let's see how that works. We can even add extra steps to encode our bits into unicode. This is actually only aesthetic, as javascript string characters are 16 bits per character. aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaThis is a string that is to be encoded. Let's see how that works. We can even add extra steps to encode our bits into unicode. This is actually only aesthetic, as javascript string characters are 16 bits per character. aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaThis is a string that is to be encoded. Let's see how that works. We can even add extra steps to encode our bits into unicode. This is actually only aesthetic, as javascript string characters are 16 bits per character. aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaThis is a string that is to be encoded. Let's see how that works. We can even add extra steps to encode our bits into unicode. This is actually only aesthetic, as javascript string characters are 16 bits per character. aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaThis is a string that is to be encoded. Let's see how that works. We can even add extra steps to encode our bits into unicode. This is actually only aesthetic, as javascript string characters are 16 bits per character. aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaThis is a string that is to be encoded. Let's see how that works. We can even add extra steps to encode our bits into unicode. This is actually only aesthetic, as javascript string characters are 16 bits per character. aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaThis is a string that is to be encoded. Let's see how that works. We can even add extra steps to encode our bits into unicode. This is actually only aesthetic, as javascript string characters are 16 bits per character. aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaThis is a string that is to be encoded. Let's see how that works. We can even add extra steps to encode our bits into unicode. This is actually only aesthetic, as javascript string characters are 16 bits per character. aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
const STR = 'This is a piece of text that gets encoded, Mike Steel can not stop talking about the damn settings page. Settings page this, settings page that. :jeff: Also 㢕絙⼳熎恋涌'
const charFrequencies = Encode.getCharacterFrequencies(STR)

const frequencies = Util.sortFrequenciesByWeight(Util.convertFrequenciesToArray(charFrequencies))
const tree = Tree.constructTreeWithFrequencies(frequencies)
const encoded = Encode.encodeCharacterString(tree, STR)
const compressed = Compress.compressEncoded(encoded)

console.log('-----')
const output = Output.format(frequencies, compressed, STR.length)
// console.log('Output length: ')
// console.log('----')
// console.log('Input of length ' + STR.length)
// console.log('Output of length ' + output.length)
// console.log(output)
// console.log('--')
// const B64 = new Buffer(output).toString('base64')
// console.log(STR.length)
// console.log(B64.length)
// console.log(B64)
// fs.writeFileSync('output/test-output.txt', B64, 'base64')

// const output = fs.readFileSync('output/test-output.jzip', 'base64')
// console.log(output)
// console.log(output.toString())
const { weightPlaces, inputFrequencies, compressedText} = Input.readCompressed(output)
// console.log('==')
// console.log(weightPlaces)
// console.log(inputFrequencies)
// console.log('---')
const formattedInputFrequencies = Input.formatFrequencies(inputFrequencies, weightPlaces)
// console.log(formattedInputFrequencies)
console.log('Compressed text matches')
console.log(compressed === compressedText)
console.log('Compressed Text before & after length')
console.log(compressed.length === compressedText.length)
const newTree = Tree.constructTreeWithFrequencies(formattedInputFrequencies)
// console.log(newTree.weight)
// console.log(tree.weight)
console.log('Trees are the same: ')
console.log(JSON.stringify(tree) === JSON.stringify(newTree))
const decompressed = Decompress.decompressEncoded(compressedText)
console.log('Decompressed are the same')
console.log(decompressed.length === encoded.length)
const decoded = Decode.decodeCharacterString(newTree, decompressed)
console.log('Decoded and encoded match')
console.log(decoded.length)

console.log(decoded === STR)
console.log('Original text: ')
console.log(STR)
console.log('Encoded without tree (Currently string 1|0 but represents bits): ')
console.log(encoded)
console.log('Original characters length: ')
console.log(STR.length)
console.log('Input bits length at 8/16/32 bit encodings')
console.log(8 * STR.length + '/' + 16 * STR.length + '/' + 32 * STR.length)
console.log('Encoded Bits length: ')
console.log(encoded.length)
console.log('Encoded and Compressed Tree + Text Bits length: ')
console.log(compressed.length * 32)
console.log('Encoded and compressed Tree + Text: ')
console.log(compressed)
console.log('Decompressed and Decoded text: ')
console.log(decoded)



